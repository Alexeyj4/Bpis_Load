;/*******************************************************
;This program was created by the
;CodeWizardAVR V2.60 Evaluation
;Automatic Program Generator
;© Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 01.10.2012
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATtiny13
;AVR Core Clock frequency: 9,600000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 16
;*******************************************************/
;
;#include <tiny13.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;
;// Declare your global variables here
;
;#define LED PORTB.4
;
;const char corr=1;   //Коррекция при настройке максимума тока (шаг назад)

	.DSEG
;const int key_pressed_counter_max=15;
;const int key_pressed_counter_min=1;
;const int main_delay=10;        //задержка в основном цикле программы
;unsigned char tuner_start_vol=85;     //начальное значение ШИМ при настройке тока
;unsigned char tuner_end_vol=200;    //конечное значение ШИМ при настройке тока
;const int tune_delay=50;   //задержка при настройке тока
;unsigned char adc_vol_1800ma=142;//значение ADC при 1,8А (подбирается опытным путем)
;//130=1.7A; 140=1.8A
;const unsigned char rise_limit=10;//предел спада тока при настройке на максимум (в значениях ADC)
;
;unsigned char i; //итератор
;int key1_pressed_counter=0;//считает, как долго нажата кнопка 1
;int key2_pressed_counter=0;//считает, как долго нажата кнопка 1
;
;unsigned char Iout;
;
;#define ADC_VREF_TYPE ((1<<REFS0) | (1<<ADLAR))
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0034 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0035 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000C VOL: 0
;	adc_input -> Y+0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0036 // Delay needed for the stabilization of the ADC input voltage
; 0000 0037 delay_us(10);
;PCODE: $00000010 VOL: 0
; 0000 0038 // Start the AD conversion
; 0000 0039 ADCSRA|=(1<<ADSC);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 003A // Wait for the AD conversion to complete
; 0000 003B while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 003C ADCSRA|=(1<<ADIF);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003D return ADCH;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003E }
;PCODE: $0000001E VOL: 0
;
;void blink_led()
; 0000 0041 {
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0042     if(LED==0){LED=1;}else{LED=0;}
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0043 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;
;unsigned char tune_peak()                    // настройка на максимум тока
; 0000 0046 {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0047     unsigned char Iout_max=0;      //теущее значение максимального тока
; 0000 0048     unsigned char Iout_max_PWMvol=0;     //значение PWM при этом токе
; 0000 0049 
; 0000 004A      delay_ms(100);
;PCODE: $0000002F VOL: 0
;	Iout_max -> R16
;	Iout_max_PWMvol -> R17
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 004B 
; 0000 004C  for(i=OCR0A;i<=tuner_end_vol;i++)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004D     {
; 0000 004E         blink_led();    //пока настраивается - мигаем светодиодом
;PCODE: $0000003F VOL: 0
; 0000 004F         OCR0A=i;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0050         delay_ms(tune_delay);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0051         Iout=read_adc(3);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0052         if(Iout>Iout_max){Iout_max=Iout;Iout_max_PWMvol=i;}
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0053         if((Iout_max-Iout)>rise_limit){break;}   //прерывание цикла, если пошел спад тока
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0054     }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0055 
; 0000 0056    if(i>=tuner_end_vol){return 0;}     //не удалось найти пик (спада не было)
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0057     OCR0A=tuner_start_vol;            //установка минимального значения тока,
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0058     delay_ms(100);                          //т.к. у блока питания гистерезис
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0059     OCR0A=Iout_max_PWMvol-corr;        //установка максимального значения тока минус значение коррекции
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 005A 
; 0000 005B return Iout_max_PWMvol; //возврат значения PWM, которое было при максимальном токе (либо возврат нуля)
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 005C }
;PCODE: $0000006B VOL: 0
;
;unsigned char tune_peak_or_current(unsigned char adc_vol) //подбор PWM, чтобы на ADC было adc_vol или настройка на максимум тока
; 0000 005F {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0060     unsigned char Iout_max=0;      //теущее значение максимального тока
; 0000 0061     unsigned char Iout_max_PWMvol=0;     //значение PWM при этом токе
; 0000 0062 
; 0000 0063      delay_ms(100);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;	adc_vol -> Y+2
;	Iout_max -> R16
;	Iout_max_PWMvol -> R17
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0064 
; 0000 0065  for(i=OCR0A;i<=tuner_end_vol;i++)
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0066     {
; 0000 0067         blink_led();    //пока настраивается - мигаем светодиодом
;PCODE: $0000007F VOL: 0
; 0000 0068         OCR0A=i;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0069         delay_ms(tune_delay);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006A         Iout=read_adc(3);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 006B         if(Iout>Iout_max){Iout_max=Iout;Iout_max_PWMvol=i;}
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 006C         if((Iout_max-Iout)>rise_limit){break;}   //прерывание цикла, если пошел спад тока
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 006D         if(Iout>=adc_vol){return i;}               //Настроился ток. Возвращаем значение PWM
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 006E     }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 006F 
; 0000 0070     OCR0A=tuner_start_vol;            //установка минимального значения тока,
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0071     delay_ms(100);                          //т.к. у блока питания гистерезис
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0072     OCR0A=Iout_max_PWMvol-corr;        //установка максимального значения тока минус значение коррекции
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0073 
; 0000 0074 return 0; //возврат нуля, т.к. ток не настроился
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0075 }
;PCODE: $000000AD VOL: 0
;
;/*unsigned char tune(unsigned char adc_vol)   //подбор PWM, чтобы на ADC было adc_vol
;{
;     OCR0A=tuner_start_vol;
;     delay_ms(100);
;
;     if(read_adc(3)>=adc_vol){return 0;}   //ток сразу больше, чем надо настроить - ошибка
;
;    for(i=tuner_start_vol;i<=tuner_end_vol;i++)
;    {
;        blink_led();    //пока настраивается - мигаем светодиодом
;        OCR0A=i;
;        delay_ms(tune_delay);
;        Iout=read_adc(3);
;        if(Iout>=adc_vol){return i;}               //Настройка удалась. Возвращаем значение PWM
;    }
;
;return 0;        //Не удалось настроиться на adc_vol
;} */
;
;void main(void)
; 0000 008B {
;PCODE: $000000AE VOL: 0
; 0000 008C // Declare your local variables here
; 0000 008D 
; 0000 008E // Crystal Oscillator division factor: 1
; 0000 008F #pragma optsize-
; 0000 0090 CLKPR=(1<<CLKPCE);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0091 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0092 #ifdef _OPTIMIZE_SIZE_
; 0000 0093 #pragma optsize+
; 0000 0094 #endif
; 0000 0095 
; 0000 0096 // Input/Output Ports initialization
; 0000 0097 // Port B initialization
; 0000 0098 // Function: Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 0099 DDRB=(1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 009A // State: Bit5=T Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=0
; 0000 009B PORTB=(0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 009C 
; 0000 009D // Timer/Counter 0 initialization
; 0000 009E // Clock source: System Clock
; 0000 009F // Clock value: 9600,000 kHz
; 0000 00A0 // Mode: Fast PWM top=0xFF
; 0000 00A1 // OC0A output: Non-Inverted PWM
; 0000 00A2 // OC0B output: Disconnected
; 0000 00A3 // Timer Period: 0,032 ms
; 0000 00A4 // Output Pulse(s):
; 0000 00A5 // OC0A Period: 0,032 ms Width: 0 us
; 0000 00A6 TCCR0A=(1<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (1<<WGM01) | (1<<WGM00);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00A7 //(0<<COM0B1) - PWM B off
; 0000 00A8 //(1<<COM0B1) - PWM B off
; 0000 00A9 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00AA 
; 0000 00AB TCNT0=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00AC OCR0A=85;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00AD 
; 0000 00AE // Timer/Counter 0 Interrupt(s) initialization
; 0000 00AF TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00B0 
; 0000 00B1 // External Interrupt(s) initialization
; 0000 00B2 // INT0: Off
; 0000 00B3 // Interrupt on any change on pins PCINT0-5: Off
; 0000 00B4 GIMSK=(0<<INT0) | (0<<PCIE);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00B5 MCUCR=(0<<ISC01) | (0<<ISC00);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00B6 
; 0000 00B7 // Analog Comparator initialization
; 0000 00B8 // Analog Comparator: Off
; 0000 00B9 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00BA DIDR0=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00BB 
; 0000 00BC // ADC initialization
; 0000 00BD // ADC Clock frequency: 1000,000 kHz
; 0000 00BE // ADC Bandgap Voltage Reference: On
; 0000 00BF // ADC Auto Trigger Source: Free Running
; 0000 00C0 // Only the 8 most significant bits of
; 0000 00C1 // the AD conversion result are used
; 0000 00C2 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 00C3 DIDR0|=(0<<ADC0D) | (0<<ADC2D) | (0<<ADC3D) | (0<<ADC1D);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00C4 ADMUX=ADC_VREF_TYPE;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00C5 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00C6 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00C7 
; 0000 00C8 if(tune_peak_or_current(adc_vol_1800ma))
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00C9 {LED=1;}else{LED=0;}   //Настройка на заданный ток удалась - включаем светодиод
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00CA 
; 0000 00CB while (1)
;PCODE: $000000DD VOL: 0
; 0000 00CC       {
; 0000 00CD       // Place your code here
; 0000 00CE 
; 0000 00CF             if(PINB.1==0){key1_pressed_counter=0;}
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00D0             if(PINB.1==1){key1_pressed_counter++;}
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00D1             if(key1_pressed_counter==key_pressed_counter_max){key1_pressed_counter=0;}
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00D2 
; 0000 00D3 
; 0000 00D4             if(PINB.2==0){key2_pressed_counter=0;}
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00D5             if(PINB.2==1){key2_pressed_counter++;}
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00D6             if(key2_pressed_counter==key_pressed_counter_max){key2_pressed_counter=0;}
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00D7 
; 0000 00D8 
; 0000 00D9            delay_ms(main_delay);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00DA 
; 0000 00DB 
; 0000 00DC 
; 0000 00DD            if((key1_pressed_counter==key_pressed_counter_min)&&(key2_pressed_counter==0))    //если кнопка 1, то увеличение тока
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00DE            {
; 0000 00DF                 LED=1;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00E0                 delay_ms(5);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00E1                 OCR0A++;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00E2                 LED=0;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00E3            }
; 0000 00E4 
; 0000 00E5 
; 0000 00E6           if((key2_pressed_counter==key_pressed_counter_min)&&(key1_pressed_counter==0))     //если кнопка 2, то уменьшение тока
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00E7            {
; 0000 00E8                 LED=1;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00E9                 delay_ms(5);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00EA                 OCR0A--;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00EB                 LED=0;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00EC            }
; 0000 00ED 
; 0000 00EE           if((PINB.1==1)&&(PINB.2==1))     //если нажаты обе кнопки, то настройка на макс тока
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00EF           {
; 0000 00F0                 LED=0;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00F1                 if(tune_peak()){LED=1;}else{LED=0;};
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00F2           }
; 0000 00F3 
; 0000 00F4 
; 0000 00F5       }
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00F6 }
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
